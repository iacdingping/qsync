<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- namespace必须指向Dao接口 -->
<mapper namespace="iac.dp.tourism.system.LogDao">
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="system-Log-columns">
	    <![CDATA[
		`ID` as `id`, `MESSAGE` as `message`, `IP` as `ip`, `USER_NAME` as `userName`, `CREATE_TIME` as `createTime`, `MODULE_NAME` as `moduleName`, `DELETED` as `deleted`, `CREATETIME` as `createtime`
	    ]]>
	</sql>	

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="save" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO SYS_LOG (
        `ID`, `MESSAGE`, `IP`, `USER_NAME`, `CREATE_TIME`, `MODULE_NAME`, `DELETED`, `CREATETIME`
        ) VALUES (
        #{id}, #{message}, #{ip}, #{userName}, #{createTime}, #{moduleName}, #{deleted}, #{createtime}        
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="update">
    <![CDATA[
        UPDATE SYS_LOG SET
	        `MESSAGE` = #{message} , `IP` = #{ip} , `USER_NAME` = #{userName} , `CREATE_TIME` = #{createTime} , `MODULE_NAME` = #{moduleName} , `DELETED` = #{deleted} , `CREATETIME` = #{createtime}  
        WHERE 
        	ID = #{id}  	        
    ]]>
	</update>

    <delete id="deleteById">
    <![CDATA[
        DELETE FROM SYS_LOG WHERE
        `ID` = #{id} 
    ]]>
    </delete>
    
    <select id="getById" resultType="Log">
		SELECT <include refid="system-Log-columns" />
	    <![CDATA[
		    FROM SYS_LOG 
	        WHERE 
		        `ID` = #{id} 
	    ]]>
	</select>
	
	<sql id="Log-where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="id">
				AND `ID` = #{id}
			</if>
	       <if test="message">
				AND `MESSAGE` = #{message}
			</if>
	       <if test="ip">
				AND `IP` = #{ip}
			</if>
	       <if test="userName">
				AND `USER_NAME` = #{userName}
			</if>
	       <if test="createTimeBegin != null">
				AND `CREATE_TIME` >= #{createTimeBegin}
		   </if>
		   <if test="createTimeEnd != null">
				AND `CREATE_TIME` &lt;= #{createTimeEnd}
		   </if>
	       <if test="moduleName">
				AND `MODULE_NAME` = #{moduleName}
			</if>
	       <if test="deleted">
				AND `DELETED` = #{deleted}
			</if>
	       <if test="createtimeBegin != null">
				AND `CREATETIME` >= #{createtimeBegin}
		   </if>
		   <if test="createtimeEnd != null">
				AND `CREATETIME` &lt;= #{createtimeEnd}
		   </if>
		</where>
	</sql>
		
    <select id="count" resultType="long">
        SELECT count(*) FROM SYS_LOG 
		<include refid="Log-where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultType="Log">
    	SELECT <include refid="system-Log-columns" />
	    FROM SYS_LOG 
		<include refid="Log-where"/>
		
		<if test="sortColumns != null">
			ORDER BY ${sortColumns}
		</if>
    </select>
	
	<select id="list" resultType="Log">
    	SELECT <include refid="system-Log-columns" />
	    FROM SYS_LOG 
		<include refid="Log-where"/>
		
		<if test="sortColumns != null">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>

